@page "/register"
@using Client.Models
@using Client.Data
@using Client.Data.Networking
@inject IAuth Auth



@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <h3>Register v1</h3>

        <div id="error">
            <p><span style="color: #ff2222">@ErrorMessage</span></p>   
        </div>
      
        <div id="form">
            <EditForm Context="formContext" Model="@newUser" OnValidSubmit="@Submit">
                <DataAnnotationsValidator />
                <ValidationSummary />


                <p>
                    <InputText id="firstname" @bind-Value="newUser.firstname" />
                    <label for="firstname">-First name</label>
                </p>

                <p>
                    <InputText id="lastname" @bind-Value="newUser.lastname" />
                    <label for="lastname">-Last name</label>
                </p>

                <p>
                    <InputText id="username" @bind-Value="newUser.username" />
                    <label for="username">-User name</label>
                </p>

                <p>
                    <InputText id="email" @bind-Value="newUser.email" />
                    <label for="email">-Email</label>
                </p>

                <p>
                    <InputText type="password" @bind-Value="@newUser.password" />
                    <label for="password">-Password</label>
                </p>

                <p>
                    <InputText type="password" @bind-Value="@newUser.confirmpassword" />
                    <label for="confirmpassword">-Confirm Password</label>
                </p>
                
                



                <button type="submit">Submit</button>

            </EditForm>
        </div>
        
    </NotAuthorized>
</AuthorizeView>



@code {
    public string ErrorMessage  { get; set; }
    private User newUser = new User();


    private async Task Submit()
    {
        ErrorMessage = "";
        try
        {
            var checkEmail = await Auth.CheckEmail(newUser.email);
            var checkUserName = await Auth.CheckUserName(newUser.username);

        
    if (checkEmail==false)
            {
                ErrorMessage = "Email already exists";
           
                throw new Exception("Email already exists");
                
            }
            if (checkUserName==false)
            {
                ErrorMessage = "Username already exists";
               
                throw new Exception("Username already exists");
                
            }
            
            await Auth.Register(newUser);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        
    }



}