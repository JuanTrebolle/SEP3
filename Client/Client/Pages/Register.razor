@page "/register"
@using Client.Models
@using Client.Data
@using Client.Data.Networking
@inject IAuth Auth



@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <EditForm Context="formContext" Model="@newUser" OnValidSubmit="@Submit">
            <DataAnnotationsValidator />

            <div class="page-login-container">
                <div class="page-column-login">
                    <div class="register-container">

                        <p class="login-title">Register</p>
                        <div class="input-group mb-4 flex-wrap">
                            <div class="input-group-prepend">
                                <span class="input-group-text input-square" id="basic-addon1">First and last Name</span>
                            </div>
                            <InputText type="text" class="form-control" style="min-width: 80px;" placeholder="" aria-label="First Name" aria-describedby="basic-addon1" @bind-Value="newUser.firstname"> </InputText>
                            <InputText input type="text" class="form-control" style="min-width: 80px;" placeholder="" aria-label="Last Name" aria-describedby="basic-addon1" @bind-Value="newUser.lastname"> </InputText>
                        </div>
                        <div class="input-group mb-4">
                            <div class="input-group-prepend">
                                <span class="input-group-text input-square-register" id="basic-addon1">&commat;</span>
                            </div>
                            <InputText type="text" class="form-control" style="min-width: 80px;" placeholder="Username" aria-label="Username" aria-describedby="basic-addon1" @bind-Value="newUser.username"></InputText>
                        </div>
                        <div class="input-group mb-4">
                            <div class="input-group-prepend">
                                <span class="input-group-text input-square-register" id="basic-addon1">E-mail</span>
                            </div>
                            <InputText type="text" class="form-control" style="min-width: 80px;" placeholder="example@mail.com" aria-label="E-mail" aria-describedby="basic-addon1" @bind-Value="newUser.email"></InputText>
                        </div>
                        <div class="input-group mb-4">
                            <div class="input-group-prepend">
                                <span class="input-group-text input-square-register" id="basic-addon1">#</span>
                            </div>
                            <InputText type="password" class="form-control" style="min-width: 80px;" placeholder="Password" aria-label="Password" aria-describedby="basic-addon1" @bind-Value="newUser.password"></InputText>
                        </div>

                        <div class="input-group mb-4">
                            <div class="input-group-prepend">
                                <span class="input-group-text input-square-register" id="basic-addon1">#</span>
                            </div>
                            <InputText type="password" class="form-control" style="min-width: 80px;" placeholder="Confirm password" aria-label="Password" aria-describedby="basic-addon1" @bind-Value="newUser.confirmpassword"></InputText>
                        </div>
                        <div style="color:red"><i>@ErrorMessage</i></div>
                        <button type="submit" class="button-signin">Sign up</button>
                        <div class="d-flex justify-content-center"> Already have an account?  <a href="/login" class="button-signup">Log in</a></div>
                        <ValidationSummary />
                    </div>
                </div>
            </div>
        </EditForm>
    </NotAuthorized>
</AuthorizeView>

@*
            //THE OLDER VERSION THAT SEEMS TO WORK
            
        <div id="form">
            <EditForm Context="formContext" Model="@newUser" OnValidSubmit="@Submit">
                <DataAnnotationsValidator />
                <ValidationSummary />


                <p>
                    <InputText id="firstname" @bind-Value="newUser.firstname" />
                    <label for="firstname">-First name</label>
                </p>

                <p>
                    <InputText id="lastname" @bind-Value="newUser.lastname" />
                    <label for="lastname">-Last name</label>
                </p>

                <p>
                    <InputText id="username" @bind-Value="newUser.username" />
                    <label for="username">-User name</label>
                </p>

                <p>
                    <InputText id="email" @bind-Value="newUser.email" />
                    <label for="email">-Email</label>
                </p>

                <p>
                    <InputText type="password" @bind-Value="@newUser.password" />
                    <label for="password">-Password</label>
                </p>

                <p>
                    <InputText type="password" @bind-Value="@newUser.confirmpassword" />
                    <label for="confirmpassword">-Confirm Password</label>
                </p>
                
                



                <button type="submit">Submit</button>

            </EditForm>
        </div>
        *@

@code {
    public string ErrorMessage  { get; set; }
    private User newUser = new User();


    private async Task Submit()
    {
        Console.WriteLine("test");
        ErrorMessage = "";
        try
        {
            var checkEmail = await Auth.CheckEmail(newUser.email);
            var checkUserName = await Auth.CheckUserName(newUser.username);


            if (checkEmail==false)
            {
                ErrorMessage = "Email already exists";

                throw new Exception("Email already exists");

            }
            if (checkUserName==false)
            {
                ErrorMessage = "Username already exists";

                throw new Exception("Username already exists");

            }
            Console.WriteLine("----------****************---------------*****************-----------------");
            Console.WriteLine(newUser.lastname);
            Console.WriteLine(newUser.firstname);
            Console.WriteLine(newUser.email);
            await Auth.Register(newUser);
            
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

    }

    public async Task PerformLogin()
    {
        ErrorMessage = "";
        try
        {
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }



}