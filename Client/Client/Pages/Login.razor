@page "/login"
@using Client.Data.Networking
@using Client.Data.Authentication
@namespace LoginComponent


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager





<AuthorizeView>
    <NotAuthorized>
        <div class="page-login-container">
            <div class="page-column-login">
                <div class="login-container">
                    <p class="login-title">Log in</p>
                    <div class="input-group mb-4">
                        <div class="input-group-prepend">
                            <span class="input-group-text input-square" id="basic-addon1">&commat;</span>
                        </div>
                        <input type="text" class="form-control" style="min-width: 80px;" placeholder="Username" aria-label="Username" aria-describedby="basic-addon1" @bind-value="username">
                    </div>
                    <div class="input-group mb-4">
                        <div class="input-group-prepend" >
                            <span class="input-group-text input-square" id="basic-addon1">#</span>
                        </div>
                        <input type="text" class="form-control" style="min-width: 80px;" placeholder="Password" aria-label="Password" aria-describedby="basic-addon1" @bind-value="password">
                    </div>
                    <div style="color:red"><i>@errorMessage</i></div>
                    <a href="#" class="button-signin" @onclick="PerfomLogin">Sign in</a>
                    <div class="d-flex justify-content-center mb-3"> Don&apos;t have an account?  <a href="#" class="button-signup" @onclick="PerformRegister">Sign up</a></div>
                </div>
            </div>
        </div>

    </NotAuthorized>

</AuthorizeView>



@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerfomLogin()
    {
        errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    public async Task PerformRegister()
    {
        errorMessage = "";
        try
        {
            NavigationManager.NavigateTo("/register");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }


}