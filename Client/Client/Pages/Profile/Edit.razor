
@using Client.Data
@using Client.Models
@using System.Text.Json
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
<h3>Edit</h3>


@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IAuth Auth


<div id="error">
    <p><span style="color: #ff2222">@ErrorMessage</span></p>   
</div>

<EditForm Context="editForm" Model="@cachedUser" OnValidSubmit="@EditFirstName">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <p>
        <label for="firstname">First name</label><br>
        <InputText id="firstname" @bind-Value="cachedUser.firstname"/>
        <button class="button1" type="submit">Save</button>
    </p>
</EditForm>

<EditForm Context="editForm" Model="@cachedUser" OnValidSubmit="@EditLastName">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <p>
        <label for="lastname">Last name</label><br>
        <InputText id="lastname" @bind-Value="cachedUser.lastname"/>

        <button class="button1" type="submit">Save</button>
    </p>
</EditForm>

<EditForm Context="editForm" Model="@cachedUser" OnValidSubmit="@EditUserName">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <p>
        <label for="username">Username</label><br>
        <InputText id="username" @bind-Value="cachedUser.username"/>

        <button class="button1" type="submit">Save</button>
    </p>
</EditForm>

<EditForm Context="editForm" Model="@cachedUser" OnValidSubmit="@EditEmail">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <p>
        <label for="email">Email</label><br>
        <InputText id="email" @bind-Value="cachedUser.email"/>

        <button class="button1" type="submit">Save</button>
    </p>
</EditForm>

<EditForm Context="editForm" Model="@cachedUser" OnValidSubmit="@ChangePassword">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <p>
        <label for="newpassword">New Password</label><br>
        <InputText id="newpassword" @bind-Value="NewPassword"/>
        </p>
    <p>
            <label for="confirmpassword">Confirm Password</label><br>
            <InputText id="confirmpassword" @bind-Value="ConfirmPassword"/>
            <button class="button1" type="submit">Save</button>
        </p>
</EditForm>




@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    private CustomUser cachedUser = new CustomUser();
    
    private string ErrorMessage="Testing this";
    
    private string NewPassword;
    private string ConfirmPassword;
    private string TmpUserName;
    private string TmpEmail;
    private string TmpFirstName;
    private string TmpLastName;
    
   


    protected async override Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        var user = (await AuthStat).User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/login");
        }
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");

        if (!string.IsNullOrEmpty(userAsJson))
        {
            cachedUser = JsonSerializer.Deserialize<CustomUser>(userAsJson);
            TmpUserName = cachedUser.username;
            TmpEmail = cachedUser.email;
            TmpFirstName = cachedUser.firstname;
            TmpLastName = cachedUser.lastname;
        }
    }
    
    private async Task EditFirstName()
    {
        ErrorMessage = "";
        try
        {
            if (TmpFirstName != cachedUser.firstname)
            {

                await Auth.EditFirstName(cachedUser.id, cachedUser.firstname);
            }
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }

    }

    private async Task EditLastName()
    {
        ErrorMessage = "";
        try
        {
            if (TmpLastName != cachedUser.lastname)
            {
                await Auth.EditLastName(cachedUser.id, cachedUser.lastname);
            }
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }

    private async Task EditUserName()
    {
        ErrorMessage = "";
        Console.WriteLine("Testing username");
        try
        {
            if (TmpUserName != cachedUser.username)
            {
                var checkUserName = await Auth.CheckUserName(cachedUser.username);
                if (checkUserName == false)
                {
                    ErrorMessage = "Username already exists";
                    throw new Exception("Username already exists");
                }
                await Auth.EditUserName(cachedUser.id, cachedUser.username);
            }
            
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }

    private async Task EditEmail()
    {
        ErrorMessage = "";
        try
        {
            if (TmpEmail != cachedUser.email)
            {
                var checkEmail = await Auth.CheckEmail(cachedUser.email);
                if (checkEmail == false)
                {
                    ErrorMessage = "Email already exists";
                    throw new Exception("Email already exists");
                }
                await Auth.EditEmail(cachedUser.id, cachedUser.email);
            }
            
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }

    private async Task ChangePassword()
    {
        ErrorMessage = "";
        try
        {
            Console.WriteLine("edit password");
            if (NewPassword != null)
            {
                if (PasswordStrength(NewPassword) < 3)
                {

                    ErrorMessage = "New password is too weak, must contain a capital letter, a number and a special character ";
                    throw new Exception("New password is too weak, must contain a capital letter, a number and a special character");
                }
                if (NewPassword != ConfirmPassword)
                {

                    ErrorMessage = "Passwords must match.";
                    throw new Exception("Passwords must match.");
                    
                }
                await Auth.ChangePassword(cachedUser.id, NewPassword);
                
            }
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }


    public int PasswordStrength(string password)
    {
        int counter = 0;
       
        if (Regex.IsMatch(password, "[A-Z]",RegexOptions.ECMAScript))
        {
            counter++;
        }
        if (Regex.IsMatch(password, "[0-9]"))
        {
            counter++;
                   
        }
        if (Regex.IsMatch(password, "[!-)]"))
        {
            counter++;
                    
        }
        return counter;
    }
    }
}