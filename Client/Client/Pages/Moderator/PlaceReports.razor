@using Client.Models
@using Client.Data
@inject IModel Model
@inject AuthenticationStateProvider AuthenticationStateProvider

<div style="padding: 10px;">
	<h3>Place Reports</h3>

	@foreach (Report<Place> item in reports)
	{
		<div class="card">
			<h5 class="card-header">Place: @item.reportedItem.title</h5>
			<div class="card-body">
				<h6 class="card-subtitle mb-2 text-muted">Category: @item.category</h6>
				<p class="card-text">@item.description</p>
				<a href="/place/@item.reportedItem.id" class="card-link">Open place</a>
				<a class="card-link">
					<RadzenDropDown class="align-middle" AllowClear="true" TValue="string"
									Placeholder="Action"
									Data=@options
									TextProperty="ModAction" ValueProperty="Action" Change=@(args => OnChange(args, item)) />
				</a>
			</div>
		</div>
	}
</div>

@code {
	List<Report<Place>> reports = new List<Report<Place>>();
	List<string> options = new List<string> { "Remove place", "Flag user", "Dismiss" };

	protected override async Task OnInitializedAsync()
	{
		reports = await Model.GetPlaceReportsAsync();
	}

	public async Task RemovePlaceAsync(long placeId)
	{
		reports.RemoveAll(item => item.reportedItem.id == placeId);
		await Model.RemovePlaceAsync(placeId);
	}

	public async Task DismissPlaceReportAsync(long reportId)
	{
		reports.RemoveAll(item => item.reportId == reportId);
		await Model.DismissPlaceReportAsync(reportId);
	}

	public async Task FlagUserAsync(long userId)
	{
		await Model.ReportUserAsync(new User() { id = userId });
	}

	void OnChange(object value, Report<Place> report)
	{
		var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

		switch (str)
		{
			case "Remove place":
				RemovePlaceAsync(report.reportedItem.id);
				break;
			case "Flag user":
				FlagUserAsync(report.reportedItem.addedBy.userId);
				break;
			case "Dismiss":
				DismissPlaceReportAsync(report.reportId);
				break;
			default:
				Console.WriteLine("not done");
				break;
		}
	}

}


