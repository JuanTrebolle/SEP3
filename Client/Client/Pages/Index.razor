@page "/"
@inject IJSRuntime JSRuntime
@inject Client.Data.IMap Map
@using Client.Models
@using System.Text.Json

<div id='map'></div>


<AuthorizeView Context="authorize">
    <Authorized>

        @if (!Map.GetAddingMarkerMode())
        {
            <div class="map-overlay-button-adding" @onclick="Map.ChangeAddingMarkerMode"><RadzenIcon Icon="add_location_alt" /></div>
        }
        else
        {
            <div class="map-overlay-wrapper">
                <div class="map-overlay-button" @onclick="Map.ChangeAddingMarkerMode">
                    <RadzenIcon Icon="wrong_location" />
                </div>
                <div class="map-overlay-details">
                    <EditForm Model="@placeData">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <i style="color: red;">@ErrorMessage</i>
                        <p>Title:</p>
                        <InputText class="details-title" @bind-Value="placeData.Title" />
                        <p>Description:</p>
                        <InputText class="details-description" @bind-Value="placeData.Description"></InputText>
                    </EditForm>
                </div>
                <div class="map-overlay-button-add" @onclick="@AddMarker">ADD</div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="map-overlay-inner">
            <h6>You need to be logged in to add a place!</h6>
            <a href="login">Login</a>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code{
    private PlaceData placeData = new PlaceData();
    private string ErrorMessage { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await Map.InitMapAsync();


    }

    private async Task AddMarker()
    {
        if (!(placeData.Title == null))
        {
            User user;
            string userAsJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");

            if (!string.IsNullOrEmpty(userAsJson))
            {
                user = JsonSerializer.Deserialize<User>(userAsJson);
                placeData.addedBy = new UserData() { userId = user.id, username = user.username };
            }

            try
            {
                await Map.CreatePlace(placeData);
                placeData.Reset();
                ErrorMessage = "";
                Map.ChangeAddingMarkerMode();
            }
            catch (Exception e)
            {
                ErrorMessage = e.Message;
                Console.WriteLine(ErrorMessage);
            }



        }
        else
        {
            ErrorMessage = "Title field is required";
        }


    }
}
